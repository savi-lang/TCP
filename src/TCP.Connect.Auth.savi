:: `TCP.Connect.Auth` grants the capability to open any number of TCP connection
:: sockets to any remote hosts/ports.
::
:: To grant the capability to open just one TCP connection, attenuate this
:: capability to a `TCP.Connect.Ticket`, using the `to` method.
:struct val TCP.Connect.Auth // TODO: use :authority instead of an empty :struct

  :: Use the given `TCP.Auth` (which grants the capability for all TCP actions)
  :: to attenuate to this lesser capability (which grants only TCP connections).
  :new val (auth TCP.Auth)

  :: Use this capability (which grants unlimited TCP connections) to attenuate
  :: to a `TCP.Connect.Ticket` (which grants for only a single host and port).
  ::
  :: The `host` string indicates the remote host to connect to, either as an
  :: IP address, or as a domain name to be resolved via DNS.
  :: If `host` is empty, localhost (the loopback interface) will be targeted.
  ::
  :: The `port` string may be a number string (such as `"80"`) or a named port
  :: (such as `"http"`). See the IANA port number registry for more examples.
  ::
  :: The `from_port`, if given, indicates the local port to bind to.
  :: This is not usually necessary, but may be used if the remote side is
  :: expected to validate the port that the connection comes from.
  :: If `from_port` is left empty, an open port will be selected arbitrarily.
  :fun val to(host String, port String, from_port String = "")
    TCP.Connect.Ticket.new(@, host, port, from_port)
