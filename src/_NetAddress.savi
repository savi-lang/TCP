:class val _NetAddress // TODO: make this a struct after patching the runtime to not assume a class
  :let _family U16: 0
  :let _port   U16: 0 :: Port number in network byte order.
  :let _ipv4   U32: 0 :: Bits for an IPv4 address in network byte order.
  :let _ipv6a  U32: 0 :: Bits 0-32 of an IPv6 address in network byte order.
  :let _ipv6b  U32: 0 :: Bits 33-64 of an IPv6 address in network byte order.
  :let _ipv6c  U32: 0 :: Bits 65-96 of an IPv6 address in network byte order.
  :let _ipv6d  U32: 0 :: Bits 97-128 of an IPv6 address in network byte order.
  :let _scope  U32: 0 :: IPv6 scope (unicast, anycast, multicast, etc...).

  :new _for_fd(fd):      _FFI.pony_os_sockname(fd, @)
  :new _for_fd_peer(fd): _FFI.pony_os_peername(fd, @)

  :fun is_ipv4: _FFI.pony_os_ipv4(@)
  :fun is_ipv6: _FFI.pony_os_ipv6(@)

  :fun port_number: @_port.be_to_native

  :fun ip_address
    if @is_ipv4 (
      IPAddress.new_v4_raw(@_ipv4.be_to_native)
    |
      IPAddress.new_v6_raw(
        @_ipv6a.be_to_native.u64.bit_shl(32).bit_or(
          @_ipv6b.be_to_native.u64
        )
        @_ipv6c.be_to_native.u64.bit_shl(32).bit_or(
          @_ipv6d.be_to_native.u64
        )
      )
    )

  :fun ip_address_with_port_number
    @ip_address.with_port_number(@port_number)
