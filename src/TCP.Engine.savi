:class TCP.Engine
  :is IO.Engine(IO.Action)
  :var io IO.CoreEngine
  :var _listener (IO.Actor(IO.Action) | None): None
  :var _pending_connect_count I32: 0
  :let read_stream: ByteStream.Reader.new
  :let write_stream ByteStream.Writer

  :fun non _asio_flags
    if Platform.is_windows (
      AsioEvent.Flags.read_write
    |
      AsioEvent.Flags.read_write_oneshot
    )

  :: Create a new TCP engine based on an outbound connection.
  ::
  :: The given `ticket` specifies the connection details, and also proves
  :: (via capability security) that the caller has authority to connect.
  :new (actor IO.Actor(IO.Action), ticket TCP.Connect.Ticket)
    // Begin with an "empty" IO core engine - we'll fill it later
    // after one of the attempted TCP connections succeeds.
    @io = IO.CoreEngine.new(AsioEvent.ID.null)
    @write_stream = ByteStream.Writer.new(@io)

    // If IPv4 and IPv6 resolutions are both possible, the runtime will try to
    // connect with both parallel; we'll later adopt whichever succeeds first.
    @_pending_connect_count = _FFI.pony_os_connect_tcp(
      actor
      ticket.host.cstring, ticket.port.cstring, ticket.from_port.cstring
      @_asio_flags
    )

    // If we failed to resolve any valid connection attempts, send the actor
    // a later IO action that will let it know that connection has failed.
    if @_pending_connect_count == 0 (
      actor.io_deferred_action(IO.Action.OpenFailed)
    )

  :: Create a new TCP engine based on an accepting an inbound connection.
  ::
  :: The given `ticket` is a single-use capability that originated in a
  :: `TCP.Listen.Engine` that had an incoming connection available to accept.
  :new accept(actor IO.Actor(IO.Action), ticket TCP.Accept.Ticket)
    actor.io_deferred_action(IO.Action.Opened)
    @io = IO.CoreEngine.new(
      _FFI.pony_asio_event_create(actor, ticket._fd, @_asio_flags, 0, True)
    )
    @write_stream = ByteStream.Writer.new(@io)
    @_listener = ticket._listener

  :fun ref react(event AsioEvent) @
    :yields IO.Action
    // If we haven't adopted an event yet, and this one is ready to be adopted,
    // try to adopt it now, as we expect it is one of our pending connections.
    if @io.is_waiting_to_open && event.is_writable (
      try (
        @_pending_connect_count -= 1
        @io.adopt_event!(event)
        yield IO.Action.Opened
      |
        // We failed to adopt it because it was a failed connection attempt.
        // If there are no more pending connection attempts, our last one has
        // failed and we have no choice but to admit final failure.
        if @_pending_connect_count == 0 (
          yield IO.Action.OpenFailed
        )

        // Return early because we don't want to do anything with this event
        // after having failed to adopt it already.
        return @
      )
    )

    // Now, pass the event to the inner engine and react to its yielded actions.
    @io.react(event) -> (action |
      case action == (
      | IO.Action.Closed |
        // If this TCP connection is the child of a TCP listener, then let
        // the listener know that we have closed the connection.
        // This allows the listener to keep an accurate count of how many
        // connections have been opened so far.
        try @_listener.as!(IO.Actor(IO.Action)).io_deferred_action(IO.Action.ClosedChild)
        yield action

      | IO.Action.Read |
        if Platform.is_windows (
          None // TODO: @_windows_complete_reads(arg)
        |
          @_pending_reads_unix -> (yield action)
        )

      // TODO: windows complete writes, flush-after-mute (pending writes logic from Pony)
      // | IO.Action.Write |
      //   ...

      | IO.Action.NotHandled |
        // If the underlying engine didn't want to handle this event, it means
        // this is likely a later connection attempt after we already had one.
        // If we have more connection attempts pending, we'll unsubscribe it.
        if @_pending_connect_count > 0 (
          @_pending_connect_count -= 1
          _FFI.pony_asio_event_unsubscribe(event.id)
        |
          // If we have no more pending connection attempts, pass the buck to
          // the caller to figure out what needs to be done with this event.
          // Maybe they have another engine sharing the same IO actor, perhaps.
          yield action
        )
      |
        yield action
      )
    )

    @

  :fun ref close
    @io.close
    @

  :fun ref flush!
    @write_stream.flush!

  // TODO: Remove this deprecated method.
  :: DEPRECATED: There's no need for this method anymore.
  :: Loading pending reads into the read stream will now be handled
  :: automatically by the TCP engine, which will yield an `IO.Action.Read`
  :: action for each time a pending read is completed.
  ::
  :: So you can just remove this function call from your code and de-indent
  :: the body of your yield block, such that it becomes part of the outer code.
  :: If you need to know the number of bytes available, then you can call
  :: `io.read_stream.bytes_ahead_of_marker` to find out.
  :fun ref pending_reads
    :yields USize for None
    yield @read_stream.bytes_ahead_of_marker
    @

  :fun ref _pending_reads_unix None
    :yields None for None
    while @io.is_readable (
      try (
        bytes_read = @read_stream.receive_from!(@io)
        if bytes_read > 0 (yield None)
      )
    )

  :: Get the local `IPAddress` of this side of the connection.
  :: Raises an error if the connection is not currently open.
  :fun local_address!: @_local_netaddr!.ip_address

  :: Get the local port number of this side of the connection.
  :: Raises an error if the connection is not currently open.
  :fun local_port_number!: @_local_netaddr!.port_number

  :: Get the local `IPAddress.WithPortNumber` of this side of the connection.
  :: Raises an error if the connection is not currently open.
  :fun local_address_with_port_number!
    @_local_netaddr!.ip_address_with_port_number

  :fun _local_netaddr!
    error! if @io.event_id.is_null
    _NetAddress._for_fd(_FFI.pony_asio_event_fd(@io.event_id))

  :: Get the `IPAddress` of the remote socket.
  :: Raises an error if the connection is not currently open.
  :fun remote_address!: @_remote_netaddr!.ip_address

  :: Get the port number of the remote socket.
  :: Raises an error if the connection is not currently open.
  :fun remote_port_number!: @_remote_netaddr!.port_number

  :: Get the `IPAddress.WithPortNumber` of the remote socket.
  :: Raises an error if the connection is not currently open.
  :fun remote_address_with_port_number!
    @_remote_netaddr!.ip_address_with_port_number

  :fun _remote_netaddr!
    error! if @io.event_id.is_null
    _NetAddress._for_fd_peer(_FFI.pony_asio_event_fd(@io.event_id))
