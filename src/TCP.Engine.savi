:class TCP.Engine
  :is IO.Engine(IO.Action)
  :var io IO.CoreEngine
  :var _listener (IO.Actor(IO.Action) | None): None
  :var connect_error OSError: OSError.None
  :let read_stream: ByteStream.Reader.new
  :let write_stream ByteStream.Writer

  :new (actor IO.Actor(IO.Action), ticket TCP.Connect.Ticket)
    @io = try (
      // TODO: The IO package shouldn't expose this unsafe interface that
      // could be used to circumvent the capability security of the TCP package.
      // Instead, the relevant code should be carefully moved to this package.
      IO.CoreEngine.new_tcp_connect!(
        actor
        ticket.host
        ticket.port
        ticket.from_port
      )
    |
      @connect_error = OSError.EINVAL
      IO.CoreEngine.new(AsioEvent.ID.null) // an invalid one
    )
    @write_stream = ByteStream.Writer.new(@io)

  :new accept(
    actor IO.Actor(IO.Action)
    ticket TCP.Accept.Ticket
  )
    actor.io_deferred_action(IO.Action.Opened)
    @io = IO.CoreEngine.new(
      _FFI.pony_asio_event_create(actor, ticket._fd, @_asio_flags, 0, True)
    )
    @write_stream = ByteStream.Writer.new(@io)
    @_listener = ticket._listener

  :fun non _asio_flags
    if Platform.is_windows (
      AsioEvent.Flags.read_write
    |
      AsioEvent.Flags.read_write_oneshot
    )

  :fun ref react(event AsioEvent) @
    :yields IO.Action
    @io.react(event) -> (action |
      case action == (
      | IO.Action.Closed |
        // If this TCP connection is the child of a TCP listener, then let
        // the listener know that we have closed the connection.
        // This allows the listener to keep an accurate count of how many
        // connections have been opened so far.
        try @_listener.as!(IO.Actor(IO.Action)).io_deferred_action(IO.Action.ClosedChild)

        // TODO: windows complete writes, flush-after-mute (pending writes logic from Pony)
        // | IO.Action.Write |
        //   ...
      )
      yield action
    )
    @

  :fun ref close
    @io.close
    @

  :fun ref flush!
    @write_stream.flush!

  :fun ref pending_reads
    :yields USize for None
    if Platform.is_windows (
      None // TODO: @_windows_complete_reads(arg)
    |
      @_pending_reads_unix -> (bytes_available | yield bytes_available)
    )
    @

  :fun ref _pending_reads_unix None
    :yields USize for None
    while @io.is_readable (
      try (
        bytes_read = @read_stream.receive_from!(@io)
        if (bytes_read > 0) (yield @read_stream.bytes_ahead_of_marker)
      )
    )

  :: Get the local `IPAddress` of this side of the connection.
  :: Raises an error if the connection is not currently open.
  :fun local_address!: @_local_netaddr!.ip_address

  :: Get the local port number of this side of the connection.
  :: Raises an error if the connection is not currently open.
  :fun local_port_number!: @_local_netaddr!.port_number

  :: Get the local `IPAddress.WithPortNumber` of this side of the connection.
  :: Raises an error if the connection is not currently open.
  :fun local_address_with_port_number!
    @_local_netaddr!.ip_address_with_port_number

  :fun _local_netaddr!
    error! if @io.event_id.is_null
    _NetAddress._for_fd(_FFI.pony_asio_event_fd(@io.event_id))

  :: Get the `IPAddress` of the remote socket.
  :: Raises an error if the connection is not currently open.
  :fun remote_address!: @_remote_netaddr!.ip_address

  :: Get the port number of the remote socket.
  :: Raises an error if the connection is not currently open.
  :fun remote_port_number!: @_remote_netaddr!.port_number

  :: Get the `IPAddress.WithPortNumber` of the remote socket.
  :: Raises an error if the connection is not currently open.
  :fun remote_address_with_port_number!
    @_remote_netaddr!.ip_address_with_port_number

  :fun _remote_netaddr!
    error! if @io.event_id.is_null
    _NetAddress._for_fd_peer(_FFI.pony_asio_event_fd(@io.event_id))
