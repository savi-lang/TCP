:class TCP.Listen.Engine
  :is IO.Engine(IO.Action)

  :let _actor IO.Actor(IO.Action)
  :var _fd U32: -1
  :var _event_id AsioEvent.ID: CPointer(AsioEvent.ID.Opaque).null // TODO: AsioEvent.ID.null

  :var _count USize: 0
  :var _limit USize

  :var _closed Bool: False
  :var _paused Bool: False

  :var listen_error OSError: OSError.None
  :fun listen_port_number: _NetAddress._for_fd(@_fd).port // TODO: what happens if @_fd is invalid (-1)?

  :new (@_actor, ticket TCP.Listen.Ticket, @_limit = 0)
    event = _FFI.pony_os_listen_tcp(
      @_actor
      ticket.host.cstring
      ticket.port.cstring
    )
    if event.is_not_null (
      @_event_id = event
      @_fd = _FFI.pony_asio_event_fd(@_event_id)
      @_actor.io_deferred_action(IO.Action.Opened)
    |
      @listen_error = _FFI.pony_os_errno
      @_closed = True
      @_actor.io_deferred_action(IO.Action.OpenFailed)
    )

  // TODO: Delegate much of the AsioEvent internals to an `IO.CoreEngine`.
  :fun ref react(event AsioEvent) @
    if (event.id === @_event_id) (
      if event.is_readable (
        yield IO.Action.Read
      )
      if event.is_disposable (
        _FFI.pony_asio_event_destroy(@_event_id)
        @_event_id = CPointer(AsioEvent.ID.Opaque).null // TODO: AsioEvent.ID.null
        yield IO.Action.Closed
      )
    )
    @

  :fun ref pending_connections
    :yields TCP.Accept.Ticket for None
    if Platform.is_windows (
      None // TODO
    |
      if @_closed.not (
        try (
          while (@_limit == 0 || @_count < @_limit) (
            conn_fd = _FFI.pony_os_accept(@_event_id)
            case conn_fd == (
            |  0 | error! // EWOULDBLOCK, don't try again
            | -1 | None   // Some other error, so we can try again
            |
              yield TCP.Accept.Ticket._new(@_actor, conn_fd)
              @_count += 1
            )
          )
          @_paused = True
        )
      )
    )

  :fun ref deferred_action(action IO.Action)
    if (action == IO.Action.ClosedChild) (
      @_count -= 1

      // If releasing this connection takes us below the limit,
      // unpause acceptance and try to accept more connections.
      if (@_paused && @_count < @_limit) (
        @_paused = False
        yield IO.Action.Read
      )
    |
      yield action
    )
    @

  :fun ref close
    if (@_closed.not && @_event_id.is_not_null) (
      // When not on windows, unsubscribe immediately here instead of later.
      if Platform.is_windows.not _FFI.pony_asio_event_unsubscribe(@_event_id)

      _FFI.pony_os_socket_close(@_fd)
      @_fd = -1
    )
    @
