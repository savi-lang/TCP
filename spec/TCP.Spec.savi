:actor TCP.Spec.Listener
  :is IO.Actor(IO.Action)
  :let env Env
  :let io TCP.Listen.Engine
  :new (@env)
    // TODO: Why do tests hang when "localhost" is used instead of "127.0.0.1"?
    @io = TCP.Listen.Engine.new(@
      TCP.auth(@env.root).listen.on("127.0.0.1", "") // loopback, on any port
    )

  :be dispose: @io.close

  :fun ref io_react(action IO.Action)
    case action == (
    | IO.Action.Opened |
      try (
        listen_address = @io.listen_address_with_port_number!
        @env.err.print("[Listener] Listening on \(listen_address)")
        TCP.Spec.EchoClient.new(@env, "\(listen_address.port_number)")
      |
        @env.err.print("[Listener] Failed to get listen address")
      )
    | IO.Action.OpenFailed |
      @env.err.print("[Listener] Not listening:")
      @env.err.print(@io.listen_error.name)
    | IO.Action.Read |
      @io.pending_connections -> (ticket |
        TCP.Spec.Echoer.new(@env, @, --ticket)
      )
    | IO.Action.Closed |
      @env.err.print("[Listener] Stopped listening")
    )
    @

:actor TCP.Spec.Echoer
  :is IO.Actor(IO.Action)
  :let env Env
  :let listener TCP.Spec.Listener
  :let io TCP.Engine
  :new (@env, @listener, ticket)
    remote_address = ticket.remote_address_with_port_number
    @env.err.print("[Echoer] Accepting \(remote_address)")
    @io = TCP.Engine.accept(@, --ticket)

  :fun ref io_react(action IO.Action)
    case action == (
    | IO.Action.Opened |
      try (
        local_address = @io.local_address_with_port_number!
        remote_address = @io.remote_address_with_port_number!
        @env.err.print(
          "[Echoer] Accepted from \(remote_address) on \(local_address)"
        )
      |
        @env.err.print("[Echoer] Failed to get local and/or remote address")
      )

    | IO.Action.Read |
      bytes val = @io.read_stream.extract_all
      @env.err.print("[Echoer] Received: \(Inspect[bytes])")
      @io.write_stream << bytes
      try @io.flush! // TODO: should we flush automatically on close below?
      @io.close

    | IO.Action.Closed |
      @env.err.print("[Echoer] Closed")
      @listener.dispose // ask the listener to close too
    )
    @

:actor TCP.Spec.EchoClient
  :is IO.Actor(IO.Action)
  :let env Env
  :let io TCP.Engine
  :new (@env, port)
    @io = TCP.Engine.new(@
      TCP.auth(@env.root).connect.to("localhost", port)
    )

  :fun ref io_react(action IO.Action)
    case action == (
    | IO.Action.Opened |
      try (
        local_address = @io.local_address_with_port_number!
        remote_address = @io.remote_address_with_port_number!
        @env.err.print(
          "[EchoClient] Connected from \(local_address) to \(remote_address)"
        )
      |
        @env.err.print("[EchoClient] Failed to get local and/or remote address")
      )
      @io.write_stream << b"Hello, World!"
      try @io.flush!

    | IO.Action.OpenFailed |
      @env.err.print("[EchoClient] Failed to connect.")

    | IO.Action.Read |
      if (@io.read_stream.bytes_ahead_of_marker >= b"Hello, World!".size) (
        bytes val = @io.read_stream.extract_all
        @env.err.print("[EchoClient] Received: \(Inspect[bytes])")
        @io.close
      )

    | IO.Action.Closed |
      @env.err.print("[EchoClient] Closed")
    )
    @

:class TCP.Spec
  :is Spec
  :const describes: "TCP"

  :it "can listen, connect, send, respond, disconnect, and stop listening"
    TCP.Spec.Listener.new(@env)
